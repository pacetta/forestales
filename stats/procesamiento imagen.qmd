---
title: "conteo"
format: html
editor: source
---

## En r

```{r}
# Instalar paquetes si no están instalados
# install.packages("EBImage")
# install.packages("magick")

# Cargar bibliotecas
pacman::p_load(imager)
install.packages("raster")
install.packages("rgdal")

library(raster)
library(rgdal)
# Especifica la ruta al archivo TIFF descargado
ruta_tiff <- "ruta/al/archivo/b1_imagen_landsat.tif"

# Lee el archivo TIFF
imagen_landsat <- raster(ruta_tiff)
# Define el polígono de interés (ROI) como un objeto SpatialPolygonsDataFrame
poligono <- readOGR(dsn = "ruta/a/tu/carpeta", layer = "nombre_del_archivo_shapefile")

# Extrae los valores de los píxeles dentro del polígono
valores_pixeles <- extract(imagen_landsat, poligono)

# Suma los valores de los píxeles dentro del polígono
conteo_puntos <- sum(valores_pixeles, na.rm = TRUE)

# Imprime el resultado del conteo de puntos
print(paste("Cantidad de puntos dentro del polígono:", conteo_puntos))

```


## en phython

```{python}
# Importar bibliotecas
import cv2
import numpy as np

# Leer la imagen de Google Maps
imagen = cv2.imread("imagen_google_maps.jpg")

# Convertir la imagen a escala de grises
gris = cv2.cvtColor(imagen, cv2.COLOR_BGR2GRAY)

# Aplicar umbral para resaltar los píxeles que probablemente representen árboles
_, umbral = cv2.threshold(gris, 100, 255, cv2.THRESH_BINARY_INV)

# Encontrar y contornear los objetos en la imagen
contornos, _ = cv2.findContours(umbral, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Dibujar los contornos en la imagen original
imagen_contornos = cv2.drawContours(imagen, contornos, -1, (0, 255, 0), 2)

# Contar el número de árboles
cantidad_arboles = len(contornos)

print("Cantidad de árboles:", cantidad_arboles)
```

